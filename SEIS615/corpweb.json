{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "InstanceType": {
      "Description": "Server instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small"
      ],
      "ConstraintDescription": "Must be a valid EC2 type."
    },
	"KeyPair": {
		"Description": "Name of your EC2 KeyPair to enable SSH access",
		"Type": "AWS::EC2::KeyPair::KeyName",
		"ConstraintDescription": "Must be the name of an existing KeyPair"
	},
	"YourIP": {
		"Description": "The current IP address of your workstation (x.x.x.x/32)",
		"Type": "String"
	}
  },
  
  "Resources": {
    "EngineeringVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": "10.0.0.0/18",
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test"
          }
        ]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "EngineeringVpc"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "EngineeringVpc"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGateway"
      ]
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
            "Ref": "EngineeringVpc"
        },
        "MapPublicIpOnLaunch" : "true",
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
        },
        "Tags" : [
          { "Key": "Name",
            "Value": "Website-Public-Subnet1"
          }
        ]
      }
	},
	  
    "PublicSubnet1RTassoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
	"PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
            "Ref": "EngineeringVpc"
        },
        "MapPublicIpOnLaunch" : "true",
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone" : {
          "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
        },
        "Tags" : [
          { "Key": "Name",
            "Value": "Website-Public-Subnet2"
          }
        ]
      }
	},
    
    "PublicSubnet2RTassoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },
	
    "web1": {
      "Type": "AWS::EC2::Instance",
      "Properties" : {
		"KeyName": {"Ref": "KeyPair"},
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId": "ami-3ea13f29",
        "SubnetId": { "Ref": "PublicSubnet1" },
        "SecurityGroupIds": [
          { "Ref": "WebserverSG"}
        ],
        "Tags" : [
          { "Key": "Name",
            "Value": "web1"
          }
        ]
      }
    },
	"web2": {
      "Type": "AWS::EC2::Instance",
      "Properties" : {
		"KeyName": {"Ref": "KeyPair"},
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId": "ami-3ea13f29",
        "SubnetId": { "Ref": "PublicSubnet2" },
        "SecurityGroupIds": [
          { "Ref": "WebserverSG"}
        ],
        "Tags" : [
          { "Key": "Name",
            "Value": "web2"
          }
        ]
      }
    },
    "WebserverSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
            "Ref": "EngineeringVpc"
        },
        "GroupDescription": "Security group rules for webserver host.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "YourIP"}
          }		  
        ]
      }
    },
	
	"EngineeringLB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
	  "Properties" : {
		"IpAddressType" : "ipv4",
		"Name" : "EngineeringLB",
		"Scheme" : "internet-facing",
		"SecurityGroups" : [
		   {
		     "Ref": "WebserverSG"
		   }
	    ],
		"Subnets" : [
		   {
		     "Ref": "PublicSubnet1"
		   },
		   {
		     "Ref": "PublicSubnet2"
		   }
		 ],
		"Type" : "application"
		}
	},
	
	"EngineeringWebservers": {
		"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties" : {
			"HealthCheckEnabled" : "true",
			"HealthCheckPath" : "/",
			"HealthCheckPort" : "80",
			"HealthCheckProtocol" : "HTTP",
			"Name" : "EngineeringWebservers",
			"Port" : "80",
			"Protocol" : "HTTP",
			"TargetType" : "instance",
			"VpcId" : {"Ref": "EngineeringVpc"},
			"Targets" : [
			   {
			    "Id": {
				   "Ref" : "web1"
			       },
				"Port": 80
			   },
			   {
			    "Id": {
				   "Ref" : "web2"
			       },
				"Port": 80
			   }
            ]
		}
	},
	
	
    "Listener": {
		"Type": "AWS::ElasticLoadBalancingV2::Listener",
		"Properties": {
		   "DefaultActions": [
            {
            "Type": "forward",
            "TargetGroupArn": {
                "Ref": "EngineeringWebservers"
            }
           } 
        ],
           "LoadBalancerArn": {
            "Ref": "EngineeringLB"
           },
           "Port": 80,
           "Protocol": "HTTP"
        }
    }
 },
	

  "Outputs": {
    "WebUrl": {
	  "Description": "WebUrl",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "EngineeringLB","DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}